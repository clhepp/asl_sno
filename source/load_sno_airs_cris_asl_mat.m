function [s] = load_sno_airs_cris_asl_mat(sdate, edate, xchns, res, src, vers)
%
% function load_sno_airs_cris_asl_mat() loads up radiances for a selected number
%   of channels, specified by CrIs channel number, from the JCET SNO mat files 
%   and for the specified year and months. 
%   Options for CCAST low-res or high-res.
%   Applies basic quality control for bad values and outliers.
%
% Inputs: load_sno_airs_cris_asl_mat('date1','date2',[CrIS channel list],'CrIS Resolution');
%           (a) sdate: start date as string: 'YYYY/MM/DD'
%           (b) edate: end date as string:  'YYYY/MM/DD'
%              N.B. Only accepts the same year.
%           (c) xchns: numeric IDs of CrIS channels to load based on NO guard channel list. 
%              eg [403 499 737 884 905 998 1021 1297] or [399:408], 
%              LW: [1:713], MW: [714:1146], SW: [1147:1305]
%                           MW: [714:1346], SW: [1347:1935] for 'hires3'
%           (d) CrIS spectral resolution. one of: {'low', 'high'}.
%           (e) CrIS mission (NPP = 1, or JPSS-1 = 2) [1 or 2].
%           (f) vers: string. version reference for data set (found at end of file
%               name).
%
% Output:  One structures of arrays. 
%          s: the SNO data fields:
%             cLat cLon cTim csolz clnfr cFov rc fc
%             aLat aLon aTim asolz alnfr ra fa
%             ra2c fa2c
%
% Notes: 
%        The CrIS spectra are from the CCAST production and are Sinc (unapodized).
%        Takes  ~20 GB memory to load about 3 months SNOs for LW band.
%
% Dependencies: i) AIRS good channel list; ii) nominal AIRS and CrIS frequency grids.
%    iii) fixed path and file name syntax for SNO files.
%
% Notes: i) No QA is applied. ii) time separation of SNO pairs from file is positive-only
%    so is recomputed here.
%
% Author: C. L. Hepplewhite, UMBC/JCET
%
% Version: Initial draft: 02-May-2015
% v2.0.0:  load SNO data with CrIS FOV neighbours generated by make_AIRS_CRIS_sno_v2.m
% v2.1.0:  30-Oct-2017 path updates. Simplify channel selection. comment out AIRS good channels.
% v2.1.1   5-Nov-2017 cleaned channel selection and moved QC from plotting script to this.
% 4Jan2018: CLH. Added input param: src, for mission numbers.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

cd /home/chepplew/gitLib/asl_sno/run

addpath /home/chepplew/gitLib/asl_sno/source
addpath /asl/packages/airs_decon/source             % hamm_app.m
addpath /asl/matlib/aslutil                         % rad2bt.m
addpath /home/chepplew/projects/cris                % cris_freq*.mat
addpath /home/strow/Git/breno_matlab/Math           % Math_bin.m
addpath /home/chepplew/gitLib/airs_deconv/source    % seq_match.m
 
% Greeting
disp('Hello! this is load_sno_airs_cris_asl_mat.m');

% initialize logicals to false
LR = false(1);
HR = false(1);

% Assign version string, vers:
allvers =  {'','v20a','_v20a','a2v4_ref','j1v3_a2v3','a2_test1'};
vers = lower(vers);
if(~ismember(vers,allvers)); error('version is unrecognized'); return; end
%vers = 'a2v4_p20';

% Check number of input arguments
if(nargin ~= 6) error('Please enter all 6 input arguments'); return; end

% Check mission numbers
if(length(src) ~=1) error('Need only CRIS mission number'); return; end
junk = ismember(src,[1,2]);
if(~all(junk)) error('Mission numbers can only be 1 or 2 for now'); return; end
disp(['you have selected CRIS-' num2str(src)]);
if(src == 1) CX = '';  end % vers = 'v20a';   end
if(src == 2) CX = '2'; end % vers = 'a2v4rf'; end

% ------------------------
% Process the date strings
posYrs = [2002:2018];
posMns = [1:12];
whos sdate; disp([sdate ' to ' edate]); fprintf('\n');
try 
   D1 = datenum(sdate,'yyyy/mm/dd');
   D2 = datenum(edate,'yyyy/mm/dd');
catch
   error('Incorrect Date Format')
   return
end
[nyr1 nmn1 ndy1] = datevec(D1);
[nyr2 nmn2 ndy2] = datevec(D2);
if(nyr1 ~= nyr2) error('Use same year only'); return; end
cyr1   = sdate(1:4);     cmn1 = sdate(6:7);     cdy1 = sdate(9:10);
cyr2   = edate(1:4);     cmn1 = edate(6:7);     cdy1 = edate(9:10);

  junk = sprintf('%4d/%02d/%02d',nyr1-1,12,31);
jdy1   = datenum(sdate)-datenum(junk);  clear junk;           % needed for data directory
  junk = sprintf('%4d/%02d/%02d',nyr2-1,12,31);
jdy2   = datenum(edate)-datenum(junk);  clear junk;           % needed for data directory

% -----------------------------------
% Check the requested CrIS resolution
res = upper(res);
if(~ismember(res,{'LOW','HIGH'})) error('Invalid CrIS resolution option'); end
if(strcmp(res,'HIGH')) HR=true(1); end
if(strcmp(res,'LOW'))  LR=true(1); end

% ------------------------------------
% Get SNO files by dates as requested:
if HR 
   dp = ['/home/chepplew/data/sno/airs_cris' CX '/ASL/HR/' cyr1 '/']; end
if LR  
   dp = ['/home/chepplew/data/sno/airs_cris' CX '/ASL/LR/' cyr1 '/']; end
if(src == 1)
  %snoLst = dir(strcat(dp, 'sno_airs_cris_asl_wngbr_*frmL1c_',vers,'.mat'));
  snoLst = dir(strcat(dp, 'sno_airs_cris_asl_wngbr_*frmL1c_',vers,'.mat')); %2016
end
if(src == 2)
  snoLst = dir(strcat(dp, 'sno_airs_cris_asl_wngbr_*frmL1c_',vers,'.mat'));
end
disp(['Found ' num2str(numel(snoLst)) ' SNO files']);

ifn1 = 1;             % default start with first file unless later.
for i=1:numel(snoLst)
  junk = regexp(snoLst(i).name,'[0-9]','match');
  junk = cell2mat(junk(1:end));                   % no. 4 appears before date
  thisdat = datenum(junk,'yyyymmdd');
  if(thisdat < D1)  ifn1 = i+1; end
  if(thisdat <= D2) ifn2 = i; end
end
disp(['Source dir: ' dp]);
fprintf(1,'Loading %d SNO files from: %s to %s\n',(ifn2-ifn1+1),snoLst(ifn1).name, ...
        snoLst(ifn2).name);

% ---------------------------------------
% Check channel numbers entered correctly
if(min(xchns) < 1 || max(xchns) > 1317 ) fprintf(1,'Wrong channel numbers used\n'); end

% ------------------------------------------------------------
% get channel lists (need to know in advance which are stored)
load('/home/chepplew/projects/airs/master_nig_01_2009.mat');   % nig [1 x 1535]
% nig = importdata('/home/strow/Work/Airs/good_chan_list');
junk = ismember([1:2378], nig);  nib = find(junk == 0);  clear junk;

xx = load('/home/chepplew/projects/airs/airs_f.mat'); 
  f2645 = xx.fairs;  f2378 = xx.f; clear xx;
if LR
% Get the low_res fa2c grid. 1185 (orig) 1178 (trimmed MW band) from HM decon routine
  xx   = load('/home/chepplew/projects/sno/airs_cris/fa2c_x.mat');
  fa2c = xx.fa2c_trim; clear xx;
  xx   = load('cris_freq_nogrd.mat'); fc_ng=xx.vchan;       % 1305 chns (no grd)
  xx   = load('cris_freq_2grd.mat');  fcris=xx.vchan; icris=xx.ichan;  % 1317 (12 grd)
  nvc  = length(fcris);
  nvd  = length(fa2c);
end
if HR
  xx   = load('/home/chepplew/projects/sno/airs_cris/fa2c_x.mat');
  fa2c = xx.fa2c_hires3;  clear xx;
  xx   = load('cris_hr_freq_2grd.mat'); fcris = xx.vchan; icris = xx.ichan; 
  nvc  = length(fcris); 
  nvd  = length(fa2c);
end


% rc (CrIS) radiances are supplied on 1317 channel grid (2 guard channels)
% Get the channels to load rc.
if LR [~, cchns]  = intersect(icris, xchns);  end
if HR [~, cchns]  = intersect(icris, xchns);  end

% ra2c (airs2cris) is supplied on different channel grids, and MW band is restricted.
% Get the channels to load ra2c
[~, dchns] = intersect(fa2c, fcris(cchns));
if(length(dchns) ~= length(cchns)) disp('channel mismatch'); 
   [ftmp, ~]  = intersect(fcris(cchns),fa2c(dchns));
   [~, cchns] = intersect(fcris, ftmp);
%else
%   [iwant,~] = intersect(cchns, dchns);    % seq_match(fcris(cchns), fa2c(dchns));
%   cchns = iwant;
end 

% the A2C channels are a subset of the CrIS channels
%[iwant,~] = seq_match(fcris(cchns), fa2c(dchns));

 % map AIRS good chans to 2645 grid (not used here)
[zi zj] = seq_match(sort(f2378(nig)), f2645);
  
% Get the AIRS channels to load
achns = [find(f2645 >= fcris(xchns(1)),1):find(f2645 >= fcris(xchns(end)),1)-1];
%achns = [1260:2162]; % use with MW band if needed: 
cWavs  = fcris(cchns);
aWavs  = f2645(achns);

% ------------------------------------------
% Choose which profiler to use (goes in prf)
junk = [-5:.05:5]; y0 = normpdf(junk,0,1); yp = cumsum(y0)./20.0; clear junk y0;
s.prf  = yp;


% ********************   load up SNO data   ********************

s.tdiff = [];    s.ra = [];    s.rc = [];    s.ra2c = [];  s.cTime = [];  s.aTime = []; 
 s.aLat = [];  s.aLon = []; s.dist  = [];    s.cLat = [];   s.cLon = [];  s.csolz = [];  
s.alnfr = []; s.clnfr = [];  s.cFov = []; s.nbr_rLW = []; s.nbr_ra = []; s.nbr_rd = [];
s.l1creas = [];  s.l1cproc = [];

for ifn = ifn1:1:ifn2;
  vars = whos('-file',strcat(dp,snoLst(ifn).name));
  if( ismember('nbr_rLW', {vars.name}) & ismember('nbr_ra', {vars.name}) & ...
      ismember('ra2c', {vars.name})  )  %%  & ismember('nbr_ra2c', {vars.name}) ) % 
    load(strcat(dp, snoLst(ifn).name));
    if  (size(rc,1) == nvc & size(ra,1) == 2645 & size(ra2c,1) == nvd)
      s.ra      = [s.ra,   ra(achns,:)];                   % 
      rc_ham    = single(hamm_app(double(rc)));
      s.rc      = [s.rc,   rc_ham(cchns,:)];      clear rc_ham;
      s.ra2c    = [s.ra2c, ra2c(dchns,:)];              %
      %s.nbr_rLW = cat(3, s.nbr_rLW, nbr_rLW(cchns,:,:));          
      %s.nbr_ra  = cat(3, s.nbr_ra,  nbr_ra(achns,:,:));
      %s.nbr_rd  = cat(3, s.nbr_rd,  nbr_ra2c(dchns,:,:));
      s.aTime   = [s.aTime; sno.aTime];
      s.cTime   = [s.cTime; sno.cTime];
      s.aLat    = [s.aLat;  sno.aLat];         s.aLon = [s.aLon;  sno.aLon];
      s.cLat    = [s.cLat;  sno.cLat];         s.cLon = [s.cLon;  sno.cLon];
      s.cFov    = [s.cFov;  sno.cFov];
      s.tdiff   = [s.tdiff; sno.tdiff];                       %
      s.dist    = [s.dist;  sno.dist];
      %s.l1creas = [s.l1creas, l1cSynthReason(achns,:)];
      %s.l1cproc = [s.l1cproc, l1cProc(achns,:)];
    end
  else
    disp(['Skipping: ' snoLst(ifn).name]);
  end
  fprintf(1,'.');
end 
fprintf(1,'Loaded %d SNO pairs\n',size(s.cLat,1));

s.fa    = f2645;   
s.fc    = fcris;  
s.fd    = fa2c;
s.achns = achns';
s.cchns = cchns;
s.dchns = dchns;
s.vers  = vers;
s.sdate = sdate;
s.edate = edate;
s.src   = src;    % spacraft mission
s.res   = res;
s
% -------------------------------------------------------------------
% *************     Apply QC - this is ESSENTIAL !     *************
% remove -999 CrIS or A2C radiances separately also do AIRS < -999
clear iok ibad;
for i=1:size(s.ra2c,1)
  ibad(i).n = find(real(s.ra2c(i,:)) < -999);
  s.ra2c(i,ibad(i).n) = NaN;
end
clear ibad;
for i=1:size(s.rc,1)
  ibad(i).n = find(real(s.rc(i,:)) < -999);
  s.rc(i,ibad(i).n) = NaN;
end
clear ibad;
for i=1:size(s.ra,1)
  ibad(i).n = find(s.ra(i,:) < -999);
  s.ra(i,ibad(i).n) = NaN;
end
  
% --- remove 6-sigma outliers -----
addpath /home/chepplew/myLib/matlib/math          % remove_6sigma
disp(['Removing outliers']);
crbias = s.rc - real(s.ra2c);
clear g;
for i=1:size(crbias,1)
   n  = remove_6sigma(crbias(i,:));
   nn = remove_6sigma(crbias(i,n));
   g(i).n = n(nn);
end

% Now find unique set of bad SNO samples
x = []; clear ibad;
psz = size(crbias,2);
for i=1:size(crbias,1)
   x = [x setdiff(1:psz,g(i).n)];
end
x  = unique(x);
s.ig = setdiff(1:psz,x);
disp(['Removed ' num2str(length(x)) ' outliers']);



%{
% find highest l1cProc value for each channel 
% [0:unchanged, 64:cleaned, see l1cReason, 128:synthesized, 128+1:dummy fill]
% highest l1cReason: [0:preserved, 1:gap, 3, 4, 5, 8, 9, 10, 11, 12, 129:?]
for i = 1:2645
  chanProc(i) = max(s.l1cp(:,i));
  chanReas(i) = max(s.l1cr(:,i));
end
presChanID = find(chanReas == 0);    % what chance - have 2378 channels preserved

% Find the L1b channel IDs corresponding to these L1C preserved chan IDs.
b=sort(f2645(presChanID));
a=sort(fa);
[ai,bi]=seq_match(a,b);     %a(ai) are the L1b set that are preserved

% find which of these apply to the AIRS2CrIS subset.
c = sort(fd);
[ci,bi] = seq_match(c,b);
%}

% -------------  save the radiance data at this point.  --------------
%{
clear fa; fa = s.fa;
clear fc; fc = s.fc;
clear fa2c; fa2c = s.fa2c;
clear ra; ra = s.ra(:,s.ig);
clear rc; rc = s.rc(:,s.ig);
clear ra2c; ra2c = s.ra2c(:,s.ig);
  whos fa fc fa2c ra rc ra2c
savfn = '/home/chepplew/data/sno/airs_cris/radiances/2013Q2_sno_airs_cris_asl_lw.mat';
save(savfn,'fa','fc','fa2c','ra','rc','ra2c','-v7.3')
%}
%{
%  ------------------   plot checks -------------------------
abt = real(rad2bt(s.fa(s.achns), s.ra));
cbt = real(rad2bt(s.fc(s.cchns), s.rc));
dbt = real(rad2bt(s.fd(s.dchns), s.ra2c));
abm = nanmean(abt,2);
cbm = nanmean(cbt,2);
dbm = nanmean(dbt,2);
figure(1);clf;simplemap(s.cLat, s.cLon, s.tdiff*24*60);
figure(1);clf;simplemap(s.cLat, s.cLon, s.dist); 
ich = 16;
figure(1);clf;simplemap(s.cLat, s.cLon, cbt(ich,:)');
figure(1);clf;simplemap(s.cLat, s.cLon, (dbt(ich,:) - cbt(ich,:)));

figure(2);clf;plot(s.fa(s.achns),abt(:,1),'-', s.fc(s.cchns),cbt(:,1),'-', ...
  s.fd(s.dchns),dbt(:,1),'-');grid on;legend('AIRS','CrIS','A2C');
  figure(3);clf;plot([1:66493],cbt(4,:) - abt(4,:),'-');             
  figure(3);clf;plot([1:66493],cbt(4,:) - dbt(4,:),'-');
figure(2);cla;plot(s.fa(s.achns),abm,'-', s.fc(s.cchns),cbm,'-', ...
                   s.fd(s.dchns),dbm,'-');grid on;
[zc zd] = seq_match(s.fc(s.cchns), s.fd(s.dchns));
figure(3);cla;plot(s.fc(s.cchns(zc)), cbm(zc) - dbm(zd),'-');grid on;
  axis([640 1100 -0.8 0.8]);
figure(4);cla;plot(s.fc(s.cchns(zc)), cbm(zc) - dbm(zd),'-');grid on;
  axis([1200 1610 -0.8 0.8]);
  
ich=16;
nanmean(cbt(ich,:) - dbt(ich,:))
btbins = [190:1.0:330]; btcens = [190.5:1.0:329.5];
pdf_cch = histcounts(cbt(ich,:), btbins);
pdf_ach = histcounts(abt(ich,:), btbins);
pdf_dch = histcounts(dbt(ich,:), btbins);
figure(3);cla;plot(btcens, pdf_cch,'.-', btcens, pdf_ach,'.-',btcens,pdf_dch,'.-');
  grid on;xlim([190 330]);
dtbins = [-20:0.2:20];   dtcens = [-19.9:0.2:19.9];
pdf_bias = histcounts(dbt(ich,:) - cbt(ich,:), dtbins);
figure(3);clf;plot(dtcens, pdf_bias,'.-');grid on;

%}

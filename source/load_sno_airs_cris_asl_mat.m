function [s] = load_sno_airs_cris_asl_mat(sdate, edate, xwns, res, src, vers)
%
% function load_sno_airs_cris_asl_mat() loads up radiances for a selected number
%   of channels, specified by CrIs channel number, from the JCET SNO mat files 
%   and for the specified year and months. 
%   Options for CCAST low-res or high-res.
%   Applies basic quality control for bad values and outliers.
%
% Inputs: load_sno_airs_cris_asl_mat('date1','date2',[CrIS channel list],'CrIS Resolution');
%           (a) sdate: start date as string: 'YYYY/MM/DD'
%           (b) edate: end date as string:   'YYYY/MM/DD'
%                  
%           (c) xwns: wavenumbers of channels to load 
%              eg [403 499 737 884 905 998 1021 1297] or [399:408], 
%              LW: [1:713], MW: [714:1146], SW: [1147:1305]
%              LW: [1:716], MW: [717:1366], SW: [1367:1683] for midres
%                           MW: [714:1346], SW: [1347:1935] for 'hires3'
%           (d) res:  spectral resolutions of SNO product
%              {'low', 'medium','high'}.
%           (e) src:  CrIS mission (NPP = 1, or JPSS-1 = 2) [1 or 2].
%           (f) vers: string. version reference for data set (found at end of file
%               name).
%
% Output:  One structures of arrays. 
%          s: the SNO data fields:
%             cLat cLon cTim csolz clnfr cFov rc fc
%             aLat aLon aTim asolz alnfr ra fa
%             ra2c fa2c
%
% Notes: 
%        The CrIS spectra are from the CCAST production and are Sinc (unapodized).
%        Takes  ~20 GB memory to load about 3 months SNOs for LW band.
%
% Dependencies: i) AIRS good channel list; ii) nominal AIRS and CrIS frequency grids.
%    iii) fixed path and file name syntax for SNO files.
%
% Notes: i) No QA is applied. ii) time separation of SNO pairs from file is positive-only
%    so is recomputed here.
%
% Author: C. L. Hepplewhite, UMBC/JCET
%
% Version: Initial draft: 02-May-2015
% v2.0.0:  load SNO data with CrIS FOV neighbours generated by make_AIRS_CRIS_sno_v2.m
% v2.1.0:  30-Oct-2017 path updates. Simplify channel selection. comment out AIRS good channels.
% v2.1.1   5-Nov-2017 cleaned channel selection and moved QC from plotting script to this.
% 4Jan2018: CLH. Added input param: src, for mission numbers.
% Feb 2020: CLH. Cater for additional variation due to converting CrIS FSR->NSR
%           when making SNO data from FSR SDRs.
%           Changed from CrIS channel number selection to wavenumber selection.
% Jun 2020: Add new version option
%%%%%%%%%%%%%%%%%%%%%   ========================  %%%%%%%%%%%%%%%%%%%%%%%%%%%%

%cd /home/chepplew/gitLib/asl_sno/run

addpath /home/chepplew/gitLib/asl_sno/source
addpath /asl/packages/airs_decon/source             % hamm_app.m
addpath /asl/matlib/aslutil                         % rad2bt.m
%addpath /home/strow/Git/breno_matlab/Math           % Math_bin.m
addpath /home/chepplew/gitLib/airs_deconv/source    % seq_match.m
addpath /home/chepplew/myLib/data                   % cris freq grids
 
% Greeting
disp('Hello! this is load_sno_airs_cris_asl_mat.m');

% Check number of input arguments
if(nargin ~= 6) error('Please enter all 6 input arguments'); return; end

% reducing agent - for thinning amount of data loaded (for use with long time spans)
% suggested values: 1 for a month, 2: for 3 months, 4: six months, 8: a year
reductant = 4;

% initialize logicals to false
LR = false(1);
MR = false(1);
HR = false(1);

% Default processing origin & sno revision:
MX = 'ASL';

% Assign version string, vers:
allvers = {'','v20a','_v20a','a2v4_ref','j1v3_a2v3','a2_test1',...
           'noaa_pon','noaa_poff','v20d','nasa'};
vers = lower(vers);
if(~ismember(vers,allvers)); error('version is unrecognized'); return; end
if(contains(vers,'noaa'))
  vers = [upper(vers(1:4)) lower(vers(5:end))];
  MX   = vers;
  rev = 'noaa';
else
  rev = vers;
end

% Check mission numbers
if(length(src) ~=1) error('Need only CRIS mission number'); return; end
junk = ismember(src,[1,2]);
if(~all(junk)) error('Mission numbers can only be 1 or 2 for now'); return; end
disp(['you have selected CRIS-' num2str(src)]);
if(src == 1) CX = '';  end 
if(src == 2) CX = '2'; end 

% ------------------------
% Process the date strings
posYrs = [2002:2019];
posMns = [1:12];
whos sdate; disp([sdate ' to ' edate]); fprintf('\n');
try 
   D1 = datenum(sdate,'yyyy/mm/dd');
   D2 = datenum(edate,'yyyy/mm/dd');
catch
   error('Incorrect Date Format')
   return
end
[nyr1 nmn1 ndy1] = datevec(D1);
[nyr2 nmn2 ndy2] = datevec(D2);
cyr1   = sdate(1:4);     cmn1 = sdate(6:7);     cdy1 = sdate(9:10);
cyr2   = edate(1:4);     cmn2 = edate(6:7);     cdy2 = edate(9:10);

  junk = sprintf('%4d/%02d/%02d',nyr1-1,12,31);
jdy1   = datenum(sdate)-datenum(junk);  clear junk;           % needed for data directory
  junk = sprintf('%4d/%02d/%02d',nyr2-1,12,31);
jdy2   = datenum(edate)-datenum(junk);  clear junk;           % needed for data directory

% -----------------------------------
% Check the requested CrIS resolution
res = upper(res);
if(~ismember(res,{'LOW','MEDIUM','HIGH'}))  
    error('Invalid SNO CrIS res. option'); return; end
switch res
  case 'HIGH'   
    HR=true(1); CR='HR';
  case 'MEDIUM' 
    MR=true(1); CR='MR';
  case 'LOW'    
    LR=true(1); CR='LR'; 
end

disp(['CrIS Mission: ' num2str(src) '. Origin: ' MX '. SNO: ' CR '.'])

% ------------------------------------
% Get SNO files by dates as requested:
if(nyr2 > nyr1)
  disp('yr2 > yr1')
  dp1 = ['/home/chepplew/data/sno/airs_cris' CX '/' MX '/' CR '/' cyr1 '/'];
  dp2 = ['/home/chepplew/data/sno/airs_cris' CX '/' MX '/' CR '/' cyr2 '/'];
  lst1 = dir([dp1 'sno_airs_cris_asl_wngbr_*_frmL1c_' rev '.mat']);
  lst2 = dir([dp2 'sno_airs_cris_asl_wngbr_*_frmL1c_' rev '.mat']);
  snoLst = [lst1; lst2];
elseif (nyr2 == nyr1)
  disp('yr2 = yr1')
  dp  = ['/home/chepplew/data/sno/airs_cris' CX '/' MX '/' CR '/' cyr1 '/'];
  snoLst = dir(strcat(dp, 'sno_airs_cris_asl_wngbr_*frmL1c_',rev,'.mat'));
end
disp(['Found ' num2str(length(snoLst)) ' SNO files']);

ifn1 = 1;
for ii=1:length(snoLst)

  junk = regexp(snoLst(ii).name,'[0-9]','match');
  Dx = datenum(cell2mat(junk(1:8)),'yyyymmdd');
  if(Dx < D1)  ifn1 = ii+1; end % disp(num2str(ii)); end
  if(Dx <= D2) ifn2 = ii; end
end

disp(['Source directory: ', snoLst(1).folder])
fprintf(1,'Loading every %d th of %d SNO files from: %s to %s\n', ...
   reductant, (ifn2-ifn1+1), snoLst(ifn1).name, snoLst(ifn2).name);

% Check channel numbers entered correctly
if(length(xwns) < 1 || length(xwns) > 1317 ) fprintf(1,'Wrong channel numbers used\n'); end

% ------------------------------------------------------------
% get channel lists (need to know in advance which are stored)
% ------------------------------------------------------------
load('/home/chepplew/projects/airs/master_nig_01_2009.mat');   % nig [1 x 1535]
junk = ismember([1:2378], nig);  nib = find(junk == 0);  clear junk;

clear cfreq fcris icris cchns;
xx = load('/home/chepplew/projects/airs/airs_f.mat'); 
  f2645 = xx.fairs;  
  f2378 = xx.f; 
  clear xx;
xx = load('/home/chepplew/projects/sno/airs_cris/fa2c_x.mat');
if LR
% Get the low_res fa2c grid. 1185 (orig) 1178 (trimmed MW band) from HM decon routine
  fa2c  = xx.fa2c_trim; clear xx;
  nvd   = length(fa2c);
% the CrIS grid depends on original source. 1305 (no grd), 1309 (FSR->NSR), 1317 (4 grd)
  cv1   = load('cris_freq_nogrd.mat');
  cv2   = load('cris_freq_fsr_nsr_1309.mat');
  cv3   = load('cris_freq_2grd.mat');  
% NSR
  cfreq.nsr = cv3.vchan;  
  icris.nsr = cv3.ichan;
  cinds.nsr = [find(cfreq.nsr >= xwns(1),1) : find(cfreq.nsr >= xwns(end),1)];
% FSR
  cfreq.fsr = cv2.vchan;  
  icris.fsr = cv2.ichan;
  cinds.fsr = [find(cfreq.fsr >= xwns(1),1) : find(cfreq.fsr >= xwns(end),1)];
end
if MR
  fa2c  = xx.fa2c_midres;  clear xx;
  nvd   = length(fa2c);
  cv1   = load('cris_mr_freq_2grd.mat'); 
  cfreq = cv1.vchan;  
  icris = cv1.ichan; 
  cinds = [find(cfreq >= xwns(1),1) : find(cfreq >= xwns(end),1)];
end
if HR
  fa2c  = xx.fa2c_hires3;  clear xx;
  nvd   = length(fa2c);
  xx    = load('cris_hr_freq_2grd.mat'); 
  cfreq = xx.vchan;  
  icris = xx.ichan; 
  cinds = [find(cfreq >= xwns(1),1) : find(cfreq >= xwns(end),1)];
end

% Get the channels to load A2C radiances
dchns = [find(fa2c >= xwns(1),1) : find(fa2c >= xwns(end),1)];
  
% Get the AIRS channels to load
%achns = [find(f2645 >= fcris(xchns(1)),1):find(f2645 >= fcris(xchns(end)),1)-1];
achns = [find(f2645 >= xwns(1),1) : find(f2645 >= xwns(end),1)];

% if all channels are requested load all AIRS (NB beware of memory load) 
if(length(xwns) >= 1305) achns = [1:2645]; end

% ********************   load up SNO data   ********************

s.tdiff = [];  s.dist = [];       s.ra = [];      s.rc = [];   s.ra2c = [];   
s.aTime = [];  s.aLat = [];     s.aLon = [];   s.asolz = [];  s.alnfr = [];    
 s.aAsc = []; s.aScnt = [];  s.l1creas = []; s.l1cproc = [];
s.cTime = [];  s.cLat = [];     s.cLon = [];   s.csolz = [];  
s.clnfr = [];  s.cFov = [];  s.nbr_rLW = [];  s.nbr_ra = []; s.nbr_rd = [];

for ifn = ifn1:reductant:ifn2;
  vars = whos('-file',strcat(snoLst(ifn).folder,'/',snoLst(ifn).name));
  if( ismember('nbr_rLW', {vars.name}) & ismember('nbr_ra', {vars.name}) & ...
      ismember('ra2c', {vars.name})  )  %%  & ismember('nbr_ra2c', {vars.name}) ) % 
    %disp(['loading ' strcat(snoLst(ifn).folder,'/',snoLst(ifn).name )])
    load(strcat(snoLst(ifn).folder,'/', snoLst(ifn).name));
    % test for origin of CrIS spectra, select which cchns to load
    %if( strcmp(res,{'HIGH'}) ) 
      %cchns = cinds.fsr; fcris = cfreq.fsr; nvc = 1309; 
      itmp  = [find(fc >= xwns(1),1) : find(fc >= xwns(end),1)];
      ftmp  = fc(itmp);
      [fd, dchns]    = intersect(fa2c, ftmp);
      [fcris, cchns] = intersect(fc, fd);
      nvc   = length(fcris);
    %elseif( strcmp(res,{'MEDIUM'}) )
      %cchns = cinds.nsr; fcris = cfreq.nsr; nvc = 1317;
    %  itmp  = [find(fc >= xwns(1),1) : find(fc >= xwns(end),1)];
    %  ftmp  = fc(itmp);
    %  [fd, dchns]    = intersect(fa2c, ftmp);
    %  [fcris, cchns] = intersect(fc, fd);
    %  nvc   = length(fcris);
    %end
    %if( size(rc,1) == nvc & size(ra,1) == 2645 & size(ra2c,1) == nvd )
      s.ra       = [s.ra,   ra(achns,:)];                   % 
      rc_ham     = single(hamm_app(double(rc)));
      s.rc       = [s.rc,   rc_ham(cchns,:)];      clear rc_ham;
      s.ra2c     = [s.ra2c, ra2c(dchns,:)];              %
      %s.nbr_rLW  = cat(3, s.nbr_rLW, nbr_rLW(cchns,:,:));          
      %s.nbr_ra   = cat(3, s.nbr_ra,  nbr_ra(achns,:,:));
      %s.nbr_rd   = cat(3, s.nbr_rd,  nbr_ra2c(dchns,:,:));
      s.aTime    = [s.aTime; sno.aTime];
      s.cTime    = [s.cTime; sno.cTime];
      s.aLat     = [s.aLat;  sno.aLat];         s.aLon = [s.aLon;  sno.aLon];
      s.cLat     = [s.cLat;  sno.cLat];         s.cLon = [s.cLon;  sno.cLon];
      s.alnfr    = [s.alnfr; sno.alnfrac];
      s.asolz    = [s.asolz; sno.aSolzen];     s.csolz = [s.csolz; sno.cSolzen];
      s.cFov     = [s.cFov;  sno.cFov];
      s.tdiff    = [s.tdiff; sno.tdiff];                       %
      s.dist     = [s.dist;  sno.dist];
      s.aAsc     = [s.aAsc;   sno.aAsc];
%      s.aScnt    = [s.aScnt;  sno.aScnt];
      %s.l1creas = [s.l1creas, l1cSynthReason(achns,:)];
      %s.l1cproc = [s.l1cproc, l1cProc(achns,:)];
    %end
  else
    disp(['Skipping: ' snoLst(ifn).name]);
  end
  fprintf(1,'.');
end 
fprintf(1,'Loaded %d SNO pairs\n',size(s.cLat,1));

cWavs  = fc(cchns);
aWavs  = f2645(achns);

s.fa    = f2645;   
s.fc    = fcris';  
s.fd    = fa2c;
s.achns = achns';
s.cchns = cchns';
s.dchns = dchns';
s.vers  = vers;
s.sdate = sdate;
s.edate = edate;
s.src   = src;    % spacraft mission
s.res   = res;
s.list  = snoLst(ifn1:ifn2).name;
s.reductant = reductant;

% -------------------------------------------------------------------
% *************     Apply QC - this is ESSENTIAL !     *************
% remove -999 CrIS or A2C radiances separately also do AIRS < -999
clear iok ibad;
for i=1:size(s.ra2c,1)
  ibad(i).n = find(real(s.ra2c(i,:)) < -999);
  s.ra2c(i,ibad(i).n) = NaN;
end
clear ibad;
for i=1:size(s.rc,1)
  ibad(i).n = find(real(s.rc(i,:)) < -999);
  s.rc(i,ibad(i).n) = NaN;
end
clear ibad;
for i=1:size(s.ra,1)
  ibad(i).n = find(s.ra(i,:) < -999);
  s.ra(i,ibad(i).n) = NaN;
end
  
% --- remove 6-sigma outliers -----
addpath /home/chepplew/myLib/matlib/math          % remove_6sigma
disp(['Removing outliers']);
crbias = s.rc - real(s.ra2c);
clear g;
for i=1:size(crbias,1)
   n  = remove_6sigma(crbias(i,:));
   nn = remove_6sigma(crbias(i,n));
   g(i).n = n(nn);
end

% Now find unique set of bad SNO samples
x = []; clear ibad;
psz = size(crbias,2);
for i=1:size(crbias,1)
   x = [x setdiff(1:psz,g(i).n)];
end
x  = unique(x);
s.ig = setdiff(1:psz,x);
disp(['Removed ' num2str(length(x)) ' outliers']);


% ------------------- END HERE --------------------------
%{
% find highest l1cProc value for each channel 
% [0:unchanged, 64:cleaned, see l1cReason, 128:synthesized, 128+1:dummy fill]
% highest l1cReason: [0:preserved, 1:gap, 3, 4, 5, 8, 9, 10, 11, 12, 129:?]
for i = 1:2645
  chanProc(i) = max(s.l1cp(:,i));
  chanReas(i) = max(s.l1cr(:,i));
end
presChanID = find(chanReas == 0);    % what chance - have 2378 channels preserved

% Find the L1b channel IDs corresponding to these L1C preserved chan IDs.
b=sort(f2645(presChanID));
a=sort(fa);
[ai,bi]=seq_match(a,b);     %a(ai) are the L1b set that are preserved

% find which of these apply to the AIRS2CrIS subset.
c = sort(fd);
[ci,bi] = seq_match(c,b);
%}

% -------------  save the radiance data at this point.  --------------
%{
clear fa; fa = s.fa;
clear fc; fc = s.fc;
clear fa2c; fa2c = s.fa2c;
clear ra; ra = s.ra(:,s.ig);
clear rc; rc = s.rc(:,s.ig);
clear ra2c; ra2c = s.ra2c(:,s.ig);
  whos fa fc fa2c ra rc ra2c
savfn = '/home/chepplew/data/sno/airs_cris/radiances/2013Q2_sno_airs_cris_asl_lw.mat';
save(savfn,'fa','fc','fa2c','ra','rc','ra2c','-v7.3')
%}
%{
%  ------------------   plot checks -------------------------
abt = real(rad2bt(s.fa(s.achns), s.ra));
cbt = real(rad2bt(s.fc(s.cchns), s.rc));
dbt = real(rad2bt(s.fd(s.dchns), s.ra2c));
abm = nanmean(abt,2);
cbm = nanmean(cbt,2);
dbm = nanmean(dbt,2);
figure(1);clf;simplemap(s.cLat, s.cLon, s.tdiff*24*60);
figure(1);clf;simplemap(s.cLat, s.cLon, s.dist); 
ich = 16;
figure(1);clf;simplemap(s.cLat, s.cLon, cbt(ich,:)');
figure(1);clf;simplemap(s.cLat, s.cLon, (dbt(ich,:) - cbt(ich,:)));

figure(2);clf;plot(s.fa(s.achns),abt(:,1),'-', s.fc(s.cchns),cbt(:,1),'-', ...
  s.fd(s.dchns),dbt(:,1),'-');grid on;legend('AIRS','CrIS','A2C');
  figure(3);clf;plot([1:66493],cbt(4,:) - abt(4,:),'-');             
  figure(3);clf;plot([1:66493],cbt(4,:) - dbt(4,:),'-');
figure(2);cla;plot(s.fa(s.achns),abm,'-', s.fc(s.cchns),cbm,'-', ...
                   s.fd(s.dchns),dbm,'-');grid on;
[zc zd] = seq_match(s.fc(s.cchns), s.fd(s.dchns));
figure(3);cla;plot(s.fc(s.cchns(zc)), cbm(zc) - dbm(zd),'-');grid on;
  axis([640 1100 -0.8 0.8]);
figure(4);cla;plot(s.fc(s.cchns(zc)), cbm(zc) - dbm(zd),'-');grid on;
  axis([1200 1610 -0.8 0.8]);
  
ich=16;
nanmean(cbt(ich,:) - dbt(ich,:))
btbins = [190:1.0:330]; btcens = [190.5:1.0:329.5];
pdf_cch = histcounts(cbt(ich,:), btbins);
pdf_ach = histcounts(abt(ich,:), btbins);
pdf_dch = histcounts(dbt(ich,:), btbins);
figure(3);cla;plot(btcens, pdf_cch,'.-', btcens, pdf_ach,'.-',btcens,pdf_dch,'.-');
  grid on;xlim([190 330]);
dtbins = [-20:0.2:20];   dtcens = [-19.9:0.2:19.9];
pdf_bias = histcounts(dbt(ich,:) - cbt(ich,:), dtbins);
figure(3);clf;plot(dtcens, pdf_bias,'.-');grid on;

%}

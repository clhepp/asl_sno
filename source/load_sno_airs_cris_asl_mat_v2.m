function [s] = load_sno_airs_cris_asl_mat_v2(sdate1, sdate2, xchns, src)
%
% function load_sno_airs_cris_asl_mat() loads up radiances for a selected number
%   of channels, specified by CrIs channel number, from the JCET SNO mat files 
%   and for the specified year and months. 
%   Options for CCAST LR, CCAST HR, IDPS LR.
%   Unlike the sister function 'read_sno...'
%   this function cacluates statistics during load and subsets of CrIS FOV.
%
% Synopsis: load_sno_airs_cris_jct_mat('date1','date2',[chan1...chan10]);
%           date1: first month as string: 'YYYY/MM/DD'
%           date2: last month as string: 'YYYY/MM/DD'
%           xchns: numeric IDs of CrIS channels to load based on NO guard channel list. 
%           (max 10).
%           eg [403 499 737 884 905 998 1021 1297] or [399:408];
%           src: source. one of: {'low', 'high'}.
%
% Output:  Two structures of arrays. 
%             s: the SNO single fields.
%             a: whole spectrum averages and first moment.
%
%
% Notes: If the CrIS channel is associated with a bad AIRS channel or has been
%        modified by AIRS L1C (clean and fill) then the next nearest good channel
%        is substituted.
%        The CrIS spectra are from the CCAST production and are Sinc (unapodized).
%
% Dependencies: i) AIRS good channel list; ii) nominal AIRS and CrIS frequency grids.
%    iii) fixed path and file name syntax for SNO files.
%
% Notes: i) No QA is applied. ii) time separation of SNO pairs from file is positive-only
%    so is recomputed here.
%
% Author: C. L. Hepplewhite, UMBC/JCET
%
% Version: Initial draft: 02-May-2015
% v2.0.0:  load SNO data with CrIS FOV neighbours generated by make_AIRS_CRIS_sno_v2.m


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

cd /home/chepplew/gitLib/asl_sno/run

addpath /home/chepplew/gitLib/asl_sno/source
addpath /asl/packages/airs_decon/source             % hamm_app.m
addpath /asl/matlab2012/aslutil                     % rad2bt.m
addpath /home/chepplew/projects/cris                % cris_freq*.mat
addpath /home/chepplew/projects/sno/sno_git_repo/source/
addpath /home/strow/Git/breno_matlab/Math           % Math_bin.m
addpath /home/chepplew/gitLib/airs_deconv/source    % seq_match.m
 
junk = [-5:.05:5]; y0 = normpdf(junk,0,1); yp = cumsum(y0)./20.0; clear junk y0;
% Choose which profiler to use (goes in prf)
s.prf  = yp;

% Process the date strings
posYrs = [2002:2017];
posMns = [1:12];
% check dates are entered correctly:
whos sdate1; disp(sdate1); fprintf('\n');
try 
   D1 = datenum(sdate1,'yyyy/mm/dd');
   D2 = datenum(sdate2,'yyyy/mm/dd');
catch
   error('Incorrect Date Format')
   return
end
[nYr1 nMn1 nDy1] = datevec(D1);
[nYr2 nMn2 nDy2] = datevec(D2);
cYr1   = sdate1(1:4);     cMn1 = sdate1(6:7);     cDy1 = sdate1(9:10);
cYr2   = sdate2(1:4);     cMn1 = sdate2(6:7);     cDy1 = sdate2(9:10);

  junk = sprintf('%4d/%02d/%02d',nYr1-1,12,31);
jdy1   = datenum(sdate1)-datenum(junk);  clear junk;           % needed for data directory
  junk = sprintf('%4d/%02d/%02d',nYr2-1,12,31);
jdy2   = datenum(sdate2)-datenum(junk);  clear junk;           % needed for data directory

% Check channel numbers entered correctly
if(length(xchns) > 20 || length(xchns) < 1 ) fprintf(1,'Wrong number channels\n'); end
if(min(xchns) < 1 || max(xchns) > 1317 ) fprintf(1,'Wrong channel numbers used\n'); end

% get list of good AIRS channels (nig) to use, & bad (nib) to avoid
load('/home/chepplew/projects/airs/master_nig_01_2009.mat');   % nig [1 x 1535]
% nig = importdata('/home/strow/Work/Airs/good_chan_list');
junk = ismember([1:2378], nig);  nib = find(junk == 0);  clear junk;

xx = load('/home/chepplew/projects/airs/airs_f.mat'); f2645 = xx.fairs;  f2378 = xx.f; clear xx;
xx = load('cris_freq_nogrd.mat');     fc = xx.vchan;         % 1305 chns (no guard chans)
xx = load('cris_freq_2grd.mat');      fc = xx.vchan;         % 1317 chns (12 guard chans)
load('/home/chepplew/projects/sno/airs_cris/fa2c.mat');      % fa2c: 1185 frm HM decon routine
[xi xj] = intersect(fc, fa2c);                               % xj: maps fc onto fa2c
[zi zj] = seq_match(sort(f2378(nig)), f2645);                % map AIRS good channels to 2645 grid
  
% Screen the channel selection for AIRS bad channels and report any:
dchns  = xchns;
cchns  = xj(xchns);
cWavs  = fc(xj(xchns));
agood  = logical(zeros(1,numel(xchns)));         % set all to good.
for i=1:numel(cWavs)
  achns(i)  = find(f2645  > cWavs(i)-0.1,1);
  agood(i)  = ~isempty( find( ismember(f2645(zj), f2645(achns(i))) ) ); 
end
for i=1:numel(cWavs) sWavs{i}  = sprintf('%6.2f',cWavs(i)); end
aWavs = f2645(achns);
for i = 1:numel(aWavs)
  if(agood(i)) fprintf(1,'Good AIRS l1b channel: %d, %7.3f\n', i,aWavs(i)); end
end

% ************* load up SNO data ********************

dp = '/home/chepplew/data/sno/airs_cris/LR/2013/';
% snoLst = dir(strcat(dp, 'sno_airs_crisLR_clh_*_018d600s.mat'));
snoLst = dir(strcat(dp, 'sno_airs_cris_asl_wngbr_*frmL1c.mat'));
fprintf(1,'Found %d total SNO files\n',numel(snoLst));

%{
% subset range by date as requested:
dstart = datenum([nyr1 nmn1 ndy1]);
dlast  = datenum([nyr2 nmn2 ndy2]);
ifn1 = 1;             % default start with first file unless later.
for i=1:numel(snoLst)
  %junk = snoLst(i).name(15:22);               % specific file name only
  junk = regexp(snoLst(i).name,'(?<=_)[\d8]+(?=_018d)','match'); 
  thisdat = datenum( [str2num(junk{1}(1:4)) str2num(junk{1}(5:6)) str2num(junk{1}(7:8))] );
  if(thisdat <= dstart) ifn1 = i; end
  if(thisdat <= dlast) ifn2 = i; end
end
fprintf(1,'Processing SNO files from: %s to %s\n',snoLst(ifn1).name(21:28), ...
        snoLst(ifn2).name(21:28));
%}
%%%%%%%%%
s.tdiff = [];    s.ra = [];    s.rc = [];      s.rd = [];  s.cTime = [];  s.aTime = []; 
 s.aLat = [];  s.aLon = []; s.dist  = [];    s.cLat = [];   s.cLon = [];  s.csolz = [];  
s.alnfr = []; s.clnfr = [];  s.cFov = []; s.nbr_rLW = []; s.nbr_ra = []; s.nbr_rd = [];
%s.l1cr = [];  s.l1cp = [];
%a.nSam  = [];  a.avrd = [;]; a.avra = [;]; a.avrc = [;]; a.sdra = [;]; a.sdrc = [;]; 
%a.sdrd  = [;]; 

for ifn = 1:numel(snoLst)  % ifn1:ifn2;
  vars = whos('-file',strcat(dp,snoLst(ifn).name));
  if( ismember('nbr_rLW', {vars.name}) & ismember('nbr_ra', {vars.name}) & ...
      ismember('ra2c', {vars.name})    & ismember('nbr_ra2c', {vars.name}) ) % 
    load(strcat(dp, snoLst(ifn).name));
    if  (size(rc,1) == 1317 & size(ra,1) == 2645 & size(ra2c,1) == 1185)
      s.ra      = [s.ra, ra(achns,:)];                   % 
      rc_ham    = single(hamm_app(double(rc)));
      s.rc      = [s.rc, rc_ham(cchns,:)];      clear rc_ham;
      s.rd      = [s.rd, ra2c(dchns,:)];              %
      s.nbr_rLW = cat(3, s.nbr_rLW, nbr_rLW(cchns,:,:));          
      s.nbr_ra  = cat(3, s.nbr_ra,  nbr_ra(achns,:,:));
      s.nbr_rd  = cat(3, s.nbr_rd,  nbr_ra2c(dchns,:,:));
      s.aTime   = [s.aTime; sno.aTime];
      s.cTime   = [s.cTime; sno.cTime];
      s.aLat    = [s.aLat;  sno.aLat];         s.aLon = [s.aLon;  sno.aLon];
      s.cLat    = [s.cLat;  sno.cLat];         s.cLon = [s.cLon;  sno.cLon];
      s.cFov    = [s.cFov;  sno.cFov];
      s.tdiff   = [s.tdiff; sno.tdiff];                       %
      s.dist    = [s.dist;  sno.dist];
      %s.l1cr   = [s.l1cr, g.l1cReason'];
      %s.l1cp   = [s.l1cp, g.l1cProc'];
            
      %a.nSam   = [a.nSam,single(size(g.ra,2))];
      %a.avra   = [a.avra,nanmean(g.ra,2)];       a.sdra = [a.sdra,nanstd(g.ra,1,2)];  
      %a.avrc   = [a.avrc,nanmean(rc_hamm,2)];    a.sdrc = [a.sdrc,nanstd(rc_hamm,1,2)];
      %a.avrd   = [a.avrd,nanmean(g.ra2c,2)];     a.sdrd = [a.sdrd,nanstd(g.ra2c,1,2)];
    end
  else
    disp(['Skipping: ' snoLst(ifn).name]);
  end           % if ismember(nbr_rLW)
  fprintf(1,'.');
end             % end for ifn
fprintf(1,'Loaded %d SNO pairs\n',size(s.cLat,1));

s.fa = f2645;   s.fc = fc;  s.fd = fa2c;
s.achns  = achns;
s.cchns  = cchns;
s.dchns  = dchns;
s.cWavs  = cWavs;
s.aWavs  = aWavs;
s.agood  = agood;

%{
% find highest l1cProc value for each channel 
% [0:unchanged, 64:cleaned, see l1cReason, 128:synthesized, 128+1:dummy fill]
% highest l1cReason: [0:preserved, 1:gap, 3, 4, 5, 8, 9, 10, 11, 12, 129:?]
for i = 1:2645
  chanProc(i) = max(s.l1cp(:,i));
  chanReas(i) = max(s.l1cr(:,i));
end
presChanID = find(chanReas == 0);    % what chance - have 2378 channels preserved

% Find the L1b channel IDs corresponding to these L1C preserved chan IDs.
b=sort(f2645(presChanID));
a=sort(fa);
[ai,bi]=seq_match(a,b);     %a(ai) are the L1b set that are preserved

% find which of these apply to the AIRS2CrIS subset.
c = sort(fd);
[ci,bi] = seq_match(c,b);


% Compute averages and standard deviations

ratpm=0; rctpm=0; rdtpm=0; ratps=0; rctps=0; rdtps=0; ratxs=0; rctxs=0; rdtxs=0;
for i = 1:numel(a.nSam)
  ratpm = ratpm + a.avra(:,i).*a.nSam(i);    rctpm = rctpm + a.avrc(:,i).*a.nSam(i);
  rdtpm = rdtpm + a.avrd(:,i).*a.nSam(i);
  ratps = ratps + ( a.sdra(:,i).*a.sdra(:,i) + a.avra(:,i).*a.avra(:,i) )*a.nSam(i);
  rctps = rctps + ( a.sdrc(:,i).*a.sdrc(:,i) + a.avrc(:,i).*a.avrc(:,i) )*a.nSam(i);
  rdtps = rdtps + ( a.sdrd(:,i).*a.sdrd(:,i) + a.avrd(:,i).*a.avrd(:,i) )*a.nSam(i);
end

a.gavrm = ratpm/sum(a.nSam);  a.gcvrm = rctpm/sum(a.nSam);  a.gdvrm = rdtpm/sum(a.nSam);
a.gadrs = real(sqrt( ratps/sum(a.nSam) - a.gavrm.*a.gavrm ));
a.gcdrs = real(sqrt( rctps/sum(a.nSam) - a.gcvrm.*a.gcvrm ));
a.gddrs = real(sqrt( rdtps/sum(a.nSam) - a.gdvrm.*a.gdvrm ));
a.garse = a.gadrs/sqrt(sum(a.nSam));   a.gcrse = a.gcdrs/sqrt(sum(a.nSam));
a.gdrse = a.gddrs/sqrt(sum(a.nSam));
%}

%{
% plot checks
abt = real(rad2bt(s.fa(s.achns), s.ra));
cbt = real(rad2bt(s.fc(s.cchns), s.rc));
dbt = real(rad2bt(s.fd(s.dchns), s.rd));
figure(1);clf;simplemap(s.cLat, s.cLon, s.tdiff*24*60);
figure(1);clf;simplemap(s.cLat, s.cLon, s.dist); 
ich = 16;
figure(1);clf;simplemap(s.cLat, s.cLon, cbt(ich,:)');
figure(1);clf;simplemap(s.cLat, s.cLon, (dbt(ich,:) - cbt(ich,:)));

figure(2);clf;plot(s.fa(s.achns),abt(:,1),'.-', s.fc(s.cchns),cbt(:,1),'.-', ...
                   s.fd(s.dchns),dbt(:,1),'.-');grid on;
  figure(3);clf;plot([1:66493],cbt(4,:) - abt(4,:),'-');             
  figure(3);clf;plot([1:66493],cbt(4,:) - dbt(4,:),'-');
abm = nanmean(abt,2);
cbm = nanmean(cbt,2);
dbm = nanmean(dbt,2);
figure(2);clf;plot(s.fa(s.achns),abm,'.-', s.fc(s.cchns),cbm,'.-', ...
                   s.fd(s.dchns),dbm,'.-');grid on;

ich=16;
nanmean(cbt(ich,:) - dbt(ich,:))
btbins = [190:1.0:330]; btcens = [190.5:1.0:329.5];
pdf_cch = histcounts(cbt(ich,:), btbins);
pdf_ach = histcounts(abt(ich,:), btbins);
pdf_dch = histcounts(dbt(ich,:), btbins);
figure(3);clf;plot(btcens, pdf_cch,'.-', btcens, pdf_ach,'.-');grid on;
dtbins = [-20:0.2:20];   dtcens = [-19.9:0.2:19.9];
pdf_bias = histcounts(dbt(ich,:) - cbt(ich,:), dtbins);
figure(3);clf;plot(dtcens, pdf_bias,'.-');grid on;

%}
